# Copyright 2023 The Nuclio Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Security Scan

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to scan'
        required: false
        default: ''
      image_rules_override:
        description: 'Image rules override (comma separated)'
        required: false
        default: ''
      publish_results:
        description: 'Whether to publish results to Github or not (default empty - no publish)'
        required: false
        default: ''
      severity_threshold:
        description: 'The minimum severity of vulnerabilities to report ("negligible", "low", "medium", "high" and "critical".)'
        required: false
        default: 'low'
        type: choice
        options:
          - 'negligible'
          - 'low'
          - 'medium'
          - 'high'
          - 'critical'
      only_fixed:
        description: 'Whether to only report vulnerabilities that have a fix available ("true" or "false")'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  NUCLIO_LABEL: latest
  NUCLIO_ARCH: amd64
  DOCKER_BUILDKIT: 1

jobs:
  matrix_prep:
    name: Prepare image list
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      # checkout from development
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number == ''

      # checkout from PR
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number != ''
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

      - name: Overriding image rules
        if: github.event.inputs.image_rules_override != ''
        run:
          echo "DOCKER_IMAGES_RULES=$(echo ${{ github.event.inputs.image_rules_override }} | tr ',' ' ')" >> $GITHUB_ENV

      - name: print targets
        id: set-matrix
        run: |
          docker_image_rules_json=$(make print-docker-image-rules-json)

          # if "handler-builder-golang-onbuild" is in the matrix
          # then ensure "handler-builder-golang-onbuild-alpine" is there too.
          docker_image_rules_json=$(echo $docker_image_rules_json | \
            jq -c 'select(.[].image_rule=="handler-builder-golang-onbuild") += [{"image_rule":"handler-builder-golang-onbuild-alpine"}]')
          echo "matrix={\"include\":$(echo $docker_image_rules_json)}" >> $GITHUB_OUTPUT

  build_and_scan_docker_images:
    name: Scan docker image
    runs-on: ubuntu-latest
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:

      # checkout from development
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number == ''

      # checkout from PR
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number != ''
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

      - uses: actions/setup-go@v3
        with:
          cache: true
          go-version-file: go.mod

      - name: Build ${{ matrix.image_rule }} image
        run: make docker-images
        env:
          DOCKER_IMAGES_RULES: ${{ matrix.image_rule }}

      - name: Get image name for ${{ matrix.image_rule }}
        run: echo "image_name=$(make print-docker-images)" >> $GITHUB_ENV
        env:
          DOCKER_IMAGES_RULES: ${{ matrix.image_rule }}

          # for image rules that yields multiple images (e.g.: golang + golang-alpine)
          PRINT_FIRST_IMAGE: true

      - name: Define output format
        id: output-format
        run: |
          if [[ -n "${{ github.event.inputs.publish_results }}" ]]; then \
            echo "format=sarif" >> $GITHUB_OUTPUT; \
            echo "fail_build=false" >> $GITHUB_OUTPUT; \
          else \
            echo "format=table" >> $GITHUB_OUTPUT; \
            echo "fail_build=true" >> $GITHUB_OUTPUT; \
          fi

      - name: Scan image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.image_name }}
          only-fixed: ${{ github.event.inputs.only_fixed }}
          output-format: ${{ steps.output-format.outputs.format }}
          fail-build: ${{ steps.output-format.outputs.fail_build }}
          severity-cutoff: ${{ github.event.inputs.severity_threshold }}

      - name: Upload scan results
        # by default we don't upload results to github
        if: github.event.inputs.publish_results != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: ${{ matrix.image_rule }}

  scale_fs:
    name: Scan file system
    runs-on: ubuntu-latest
    steps:

      # checkout from development
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number == ''

      # checkout from PR
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number != ''
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

      - name: Define output format
        id: output-format
        run: |
          if [[ -n "${{ github.event.inputs.publish_results }}" ]]; then \
            echo "format=sarif" >> $GITHUB_OUTPUT; \
            echo "fail_build=false" >> $GITHUB_OUTPUT; \
          else \
            echo "format=table" >> $GITHUB_OUTPUT; \
            echo "fail_build=true" >> $GITHUB_OUTPUT; \
          fi

      - name: Scan fs
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "."
          only-fixed: ${{ github.event.inputs.only_fixed }}
          output-format: ${{ steps.output-format.outputs.format }}
          fail-build: ${{ steps.output-format.outputs.fail_build }}
          severity-cutoff: ${{ github.event.inputs.severity_threshold }}

      - name: Upload scan results
        if: github.event.inputs.publish_results != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: filesystem
