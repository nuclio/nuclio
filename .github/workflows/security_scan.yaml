# Copyright 2017 The Nuclio Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Security Scan

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to scan'
        required: false
        default: ''
      image_rules_override:
        description: 'Image rules override (comma separated)'
        required: false
        default: ''

env:
  NUCLIO_LABEL: latest
  NUCLIO_ARCH: amd64

jobs:
  matrix_prep:
    name: Prepare image list
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      # checkout from development
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number == ''

      # checkout from PR
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number != ''
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

      - name: Overriding image rules
        if: github.event.inputs.image_rules_override != ''
        run:
          echo "DOCKER_IMAGES_RULES=$(echo ${{ github.event.inputs.image_rules_override }} | tr ',' ' ')" >> $GITHUB_ENV

      - name: print targets
        id: set-matrix
        run: |
          echo "matrix={\"include\":$(make print-docker-image-rules | jq -c)}" >> $GITHUB_OUTPUT

  build_and_scan_docker_images:
    name: Build & Scan
    runs-on: ubuntu-latest
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:

      # checkout from development
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number == ''

      # checkout from PR
      - uses: actions/checkout@v3
        if: github.event.inputs.pr_number != ''
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

      - name: Extending image rules
        run: |
          DOCKER_IMAGES_RULES=()

          # if "onbuild-" in "matrix.image_rule", then add "processor" to DOCKER_IMAGES_RULES
          if [[ "${{ matrix.image_rule }}" == *"-onbuild"* ]]; then \
              DOCKER_IMAGES_RULES+=("processor"); \
          fi
          DOCKER_IMAGES_RULES+=(${{ matrix.image_rule }})

          echo "DOCKER_IMAGES_RULES=$(printf "%s " "${DOCKER_IMAGES_RULES[@]}")" >> $GITHUB_ENV

      - name: Build ${{ matrix.image_rule }} image
        run: make docker-images

      - name: Get image name for ${{ matrix.image_rule }}
        run: echo "image_name=$(make print-docker-images)" >> $GITHUB_ENV
        env:

          # we need the specific rule, not the extended.
          DOCKER_IMAGES_RULES: ${{ matrix.image_rule }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.image_name }}
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          ignore-unfixed: true
          output: 'trivy-results.sarif'
          format: 'sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
