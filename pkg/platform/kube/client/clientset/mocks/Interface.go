/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	discovery "k8s.io/client-go/discovery"

	v1beta1 "github.com/nuclio/nuclio/pkg/platform/kube/client/clientset/versioned/typed/nuclio.io/v1beta1"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Discovery provides a mock function with given fields:
func (_m *Interface) Discovery() discovery.DiscoveryInterface {
	ret := _m.Called()

	var r0 discovery.DiscoveryInterface
	if rf, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}

	return r0
}

// Nuclio provides a mock function with given fields:
func (_m *Interface) Nuclio() v1beta1.NuclioV1beta1Interface {
	ret := _m.Called()

	var r0 v1beta1.NuclioV1beta1Interface
	if rf, ok := ret.Get(0).(func() v1beta1.NuclioV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.NuclioV1beta1Interface)
		}
	}

	return r0
}

// NuclioV1beta1 provides a mock function with given fields:
func (_m *Interface) NuclioV1beta1() v1beta1.NuclioV1beta1Interface {
	ret := _m.Called()

	var r0 v1beta1.NuclioV1beta1Interface
	if rf, ok := ret.Get(0).(func() v1beta1.NuclioV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.NuclioV1beta1Interface)
		}
	}

	return r0
}
