/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/nuclio/nuclio/pkg/platform/kube/apis/nuclio.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NuclioFunctionEventLister helps list NuclioFunctionEvents.
// All objects returned here must be treated as read-only.
type NuclioFunctionEventLister interface {
	// List lists all NuclioFunctionEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NuclioFunctionEvent, err error)
	// NuclioFunctionEvents returns an object that can list and get NuclioFunctionEvents.
	NuclioFunctionEvents(namespace string) NuclioFunctionEventNamespaceLister
	NuclioFunctionEventListerExpansion
}

// nuclioFunctionEventLister implements the NuclioFunctionEventLister interface.
type nuclioFunctionEventLister struct {
	indexer cache.Indexer
}

// NewNuclioFunctionEventLister returns a new NuclioFunctionEventLister.
func NewNuclioFunctionEventLister(indexer cache.Indexer) NuclioFunctionEventLister {
	return &nuclioFunctionEventLister{indexer: indexer}
}

// List lists all NuclioFunctionEvents in the indexer.
func (s *nuclioFunctionEventLister) List(selector labels.Selector) (ret []*v1beta1.NuclioFunctionEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NuclioFunctionEvent))
	})
	return ret, err
}

// NuclioFunctionEvents returns an object that can list and get NuclioFunctionEvents.
func (s *nuclioFunctionEventLister) NuclioFunctionEvents(namespace string) NuclioFunctionEventNamespaceLister {
	return nuclioFunctionEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NuclioFunctionEventNamespaceLister helps list and get NuclioFunctionEvents.
// All objects returned here must be treated as read-only.
type NuclioFunctionEventNamespaceLister interface {
	// List lists all NuclioFunctionEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NuclioFunctionEvent, err error)
	// Get retrieves the NuclioFunctionEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NuclioFunctionEvent, error)
	NuclioFunctionEventNamespaceListerExpansion
}

// nuclioFunctionEventNamespaceLister implements the NuclioFunctionEventNamespaceLister
// interface.
type nuclioFunctionEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NuclioFunctionEvents in the indexer for a given namespace.
func (s nuclioFunctionEventNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.NuclioFunctionEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NuclioFunctionEvent))
	})
	return ret, err
}

// Get retrieves the NuclioFunctionEvent from the indexer for a given namespace and name.
func (s nuclioFunctionEventNamespaceLister) Get(name string) (*v1beta1.NuclioFunctionEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("nucliofunctionevent"), name)
	}
	return obj.(*v1beta1.NuclioFunctionEvent), nil
}
