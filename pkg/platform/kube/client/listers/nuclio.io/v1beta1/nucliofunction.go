/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/nuclio/nuclio/pkg/platform/kube/apis/nuclio.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NuclioFunctionLister helps list NuclioFunctions.
// All objects returned here must be treated as read-only.
type NuclioFunctionLister interface {
	// List lists all NuclioFunctions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NuclioFunction, err error)
	// NuclioFunctions returns an object that can list and get NuclioFunctions.
	NuclioFunctions(namespace string) NuclioFunctionNamespaceLister
	NuclioFunctionListerExpansion
}

// nuclioFunctionLister implements the NuclioFunctionLister interface.
type nuclioFunctionLister struct {
	indexer cache.Indexer
}

// NewNuclioFunctionLister returns a new NuclioFunctionLister.
func NewNuclioFunctionLister(indexer cache.Indexer) NuclioFunctionLister {
	return &nuclioFunctionLister{indexer: indexer}
}

// List lists all NuclioFunctions in the indexer.
func (s *nuclioFunctionLister) List(selector labels.Selector) (ret []*v1beta1.NuclioFunction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NuclioFunction))
	})
	return ret, err
}

// NuclioFunctions returns an object that can list and get NuclioFunctions.
func (s *nuclioFunctionLister) NuclioFunctions(namespace string) NuclioFunctionNamespaceLister {
	return nuclioFunctionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NuclioFunctionNamespaceLister helps list and get NuclioFunctions.
// All objects returned here must be treated as read-only.
type NuclioFunctionNamespaceLister interface {
	// List lists all NuclioFunctions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NuclioFunction, err error)
	// Get retrieves the NuclioFunction from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NuclioFunction, error)
	NuclioFunctionNamespaceListerExpansion
}

// nuclioFunctionNamespaceLister implements the NuclioFunctionNamespaceLister
// interface.
type nuclioFunctionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NuclioFunctions in the indexer for a given namespace.
func (s nuclioFunctionNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.NuclioFunction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NuclioFunction))
	})
	return ret, err
}

// Get retrieves the NuclioFunction from the indexer for a given namespace and name.
func (s nuclioFunctionNamespaceLister) Get(name string) (*v1beta1.NuclioFunction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("nucliofunction"), name)
	}
	return obj.(*v1beta1.NuclioFunction), nil
}
