/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/nuclio/nuclio/pkg/platform/kube/apis/nuclio.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FunctionEventLister helps list FunctionEvents.
type FunctionEventLister interface {
	// List lists all FunctionEvents in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FunctionEvent, err error)
	// FunctionEvents returns an object that can list and get FunctionEvents.
	FunctionEvents(namespace string) FunctionEventNamespaceLister
	FunctionEventListerExpansion
}

// functionEventLister implements the FunctionEventLister interface.
type functionEventLister struct {
	indexer cache.Indexer
}

// NewFunctionEventLister returns a new FunctionEventLister.
func NewFunctionEventLister(indexer cache.Indexer) FunctionEventLister {
	return &functionEventLister{indexer: indexer}
}

// List lists all FunctionEvents in the indexer.
func (s *functionEventLister) List(selector labels.Selector) (ret []*v1beta1.FunctionEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FunctionEvent))
	})
	return ret, err
}

// FunctionEvents returns an object that can list and get FunctionEvents.
func (s *functionEventLister) FunctionEvents(namespace string) FunctionEventNamespaceLister {
	return functionEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FunctionEventNamespaceLister helps list and get FunctionEvents.
type FunctionEventNamespaceLister interface {
	// List lists all FunctionEvents in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.FunctionEvent, err error)
	// Get retrieves the FunctionEvent from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.FunctionEvent, error)
	FunctionEventNamespaceListerExpansion
}

// functionEventNamespaceLister implements the FunctionEventNamespaceLister
// interface.
type functionEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FunctionEvents in the indexer for a given namespace.
func (s functionEventNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.FunctionEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FunctionEvent))
	})
	return ret, err
}

// Get retrieves the FunctionEvent from the indexer for a given namespace and name.
func (s functionEventNamespaceLister) Get(name string) (*v1beta1.FunctionEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("functionevent"), name)
	}
	return obj.(*v1beta1.FunctionEvent), nil
}
