// Code generated by capnpc-go. DO NOT EDIT.

package java

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SourceProvider struct{ capnp.Struct }

// SourceProvider_TypeID is the unique identifier for the type SourceProvider.
const SourceProvider_TypeID = 0x83d947b3b118e923

func NewSourceProvider(s *capnp.Segment) (SourceProvider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SourceProvider{st}, err
}

func NewRootSourceProvider(s *capnp.Segment) (SourceProvider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SourceProvider{st}, err
}

func ReadRootSourceProvider(msg *capnp.Message) (SourceProvider, error) {
	root, err := msg.RootPtr()
	return SourceProvider{root.Struct()}, err
}

func (s SourceProvider) String() string {
	str, _ := text.Marshal(0x83d947b3b118e923, s.Struct)
	return str
}

func (s SourceProvider) ClassName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SourceProvider) HasClassName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SourceProvider) ClassNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SourceProvider) SetClassName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SourceProvider) KindName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SourceProvider) HasKindName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SourceProvider) KindNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SourceProvider) SetKindName(v string) error {
	return s.Struct.SetText(1, v)
}

// SourceProvider_List is a list of SourceProvider.
type SourceProvider_List struct{ capnp.List }

// NewSourceProvider creates a new list of SourceProvider.
func NewSourceProvider_List(s *capnp.Segment, sz int32) (SourceProvider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SourceProvider_List{l}, err
}

func (s SourceProvider_List) At(i int) SourceProvider { return SourceProvider{s.List.Struct(i)} }

func (s SourceProvider_List) Set(i int, v SourceProvider) error { return s.List.SetStruct(i, v.Struct) }

func (s SourceProvider_List) String() string {
	str, _ := text.MarshalList(0x83d947b3b118e923, s.List)
	return str
}

// SourceProvider_Promise is a wrapper for a SourceProvider promised by a client call.
type SourceProvider_Promise struct{ *capnp.Pipeline }

func (p SourceProvider_Promise) Struct() (SourceProvider, error) {
	s, err := p.Pipeline.Struct()
	return SourceProvider{s}, err
}

type Entry struct{ capnp.Struct }
type Entry_value Entry
type Entry_value_Which uint16

const (
	Entry_value_Which_sVal Entry_value_Which = 0
	Entry_value_Which_iVal Entry_value_Which = 1
	Entry_value_Which_dVal Entry_value_Which = 2
)

func (w Entry_value_Which) String() string {
	const s = "sValiValdVal"
	switch w {
	case Entry_value_Which_sVal:
		return s[0:4]
	case Entry_value_Which_iVal:
		return s[4:8]
	case Entry_value_Which_dVal:
		return s[8:12]

	}
	return "Entry_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xf063f1088f6cee6b

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry{st}, err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry{st}, err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.RootPtr()
	return Entry{root.Struct()}, err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xf063f1088f6cee6b, s.Struct)
	return str
}

func (s Entry) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Entry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Entry) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Entry) Value() Entry_value { return Entry_value(s) }

func (s Entry_value) Which() Entry_value_Which {
	return Entry_value_Which(s.Struct.Uint16(0))
}
func (s Entry_value) SVal() (string, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != sVal")
	}
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Entry_value) HasSVal() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry_value) SValBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Entry_value) SetSVal(v string) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetText(1, v)
}

func (s Entry_value) IVal() int64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != iVal")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Entry_value) SetIVal(v int64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Entry_value) DVal() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != dVal")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Entry_value) HasDVal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry_value) SetDVal(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

// Entry_List is a list of Entry.
type Entry_List struct{ capnp.List }

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Entry_List{l}, err
}

func (s Entry_List) At(i int) Entry { return Entry{s.List.Struct(i)} }

func (s Entry_List) Set(i int, v Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Entry_List) String() string {
	str, _ := text.MarshalList(0xf063f1088f6cee6b, s.List)
	return str
}

// Entry_Promise is a wrapper for a Entry promised by a client call.
type Entry_Promise struct{ *capnp.Pipeline }

func (p Entry_Promise) Struct() (Entry, error) {
	s, err := p.Pipeline.Struct()
	return Entry{s}, err
}

func (p Entry_Promise) Value() Entry_value_Promise { return Entry_value_Promise{p.Pipeline} }

// Entry_value_Promise is a wrapper for a Entry_value promised by a client call.
type Entry_value_Promise struct{ *capnp.Pipeline }

func (p Entry_value_Promise) Struct() (Entry_value, error) {
	s, err := p.Pipeline.Struct()
	return Entry_value{s}, err
}

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0x8caf0e06cedf0fbd

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0x8caf0e06cedf0fbd, s.Struct)
	return str
}

func (s Event) Version() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Event) SetVersion(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Event) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Event) Source() (SourceProvider, error) {
	p, err := s.Struct.Ptr(1)
	return SourceProvider{Struct: p.Struct()}, err
}

func (s Event) HasSource() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event) SetSource(v SourceProvider) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSource sets the source field to a newly
// allocated SourceProvider struct, preferring placement in s's segment.
func (s Event) NewSource() (SourceProvider, error) {
	ss, err := NewSourceProvider(s.Struct.Segment())
	if err != nil {
		return SourceProvider{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) ContentType() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Event) HasContentType() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Event) ContentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Event) SetContentType(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Event) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Event) HasBody() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Event) SetBody(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Event) Size() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Event) SetSize(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Event) Headers() (Entry_List, error) {
	p, err := s.Struct.Ptr(4)
	return Entry_List{List: p.List()}, err
}

func (s Event) HasHeaders() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Event) SetHeaders(v Entry_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Event) NewHeaders(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Event) Fields() (Entry_List, error) {
	p, err := s.Struct.Ptr(5)
	return Entry_List{List: p.List()}, err
}

func (s Event) HasFields() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Event) SetFields(v Entry_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewFields sets the fields field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Event) NewFields(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Event) Timestamp() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Event) SetTimestamp(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Event) Path() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s Event) HasPath() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Event) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s Event) SetPath(v string) error {
	return s.Struct.SetText(6, v)
}

func (s Event) Url() (string, error) {
	p, err := s.Struct.Ptr(7)
	return p.Text(), err
}

func (s Event) HasUrl() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s Event) UrlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return p.TextBytes(), err
}

func (s Event) SetUrl(v string) error {
	return s.Struct.SetText(7, v)
}

func (s Event) Method() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s Event) HasMethod() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s Event) MethodBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s Event) SetMethod(v string) error {
	return s.Struct.SetText(8, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0x8caf0e06cedf0fbd, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

func (p Event_Promise) Source() SourceProvider_Promise {
	return SourceProvider_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Response struct{ capnp.Struct }

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xa34850e2106c7148

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xa34850e2106c7148, s.Struct)
	return str
}

func (s Response) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Response) HasBody() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetBody(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Response) ContentType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Response) HasContentType() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Response) ContentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Response) SetContentType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Response) Status() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Response) SetStatus(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Response) Headers() (Entry_List, error) {
	p, err := s.Struct.Ptr(2)
	return Entry_List{List: p.List()}, err
}

func (s Response) HasHeaders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Response) SetHeaders(v Entry_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Response) NewHeaders(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xa34850e2106c7148, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

type LogRecord struct{ capnp.Struct }

// LogRecord_TypeID is the unique identifier for the type LogRecord.
const LogRecord_TypeID = 0xb2e74d9591b6405f

func NewLogRecord(s *capnp.Segment) (LogRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return LogRecord{st}, err
}

func NewRootLogRecord(s *capnp.Segment) (LogRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return LogRecord{st}, err
}

func ReadRootLogRecord(msg *capnp.Message) (LogRecord, error) {
	root, err := msg.RootPtr()
	return LogRecord{root.Struct()}, err
}

func (s LogRecord) String() string {
	str, _ := text.Marshal(0xb2e74d9591b6405f, s.Struct)
	return str
}

func (s LogRecord) Level() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LogRecord) HasLevel() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LogRecord) LevelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LogRecord) SetLevel(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LogRecord) Message() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LogRecord) HasMessage() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LogRecord) MessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LogRecord) SetMessage(v string) error {
	return s.Struct.SetText(1, v)
}

func (s LogRecord) Timestamp() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s LogRecord) SetTimestamp(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s LogRecord) With() (Entry_List, error) {
	p, err := s.Struct.Ptr(2)
	return Entry_List{List: p.List()}, err
}

func (s LogRecord) HasWith() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s LogRecord) SetWith(v Entry_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewWith sets the with field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s LogRecord) NewWith(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// LogRecord_List is a list of LogRecord.
type LogRecord_List struct{ capnp.List }

// NewLogRecord creates a new list of LogRecord.
func NewLogRecord_List(s *capnp.Segment, sz int32) (LogRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return LogRecord_List{l}, err
}

func (s LogRecord_List) At(i int) LogRecord { return LogRecord{s.List.Struct(i)} }

func (s LogRecord_List) Set(i int, v LogRecord) error { return s.List.SetStruct(i, v.Struct) }

func (s LogRecord_List) String() string {
	str, _ := text.MarshalList(0xb2e74d9591b6405f, s.List)
	return str
}

// LogRecord_Promise is a wrapper for a LogRecord promised by a client call.
type LogRecord_Promise struct{ *capnp.Pipeline }

func (p LogRecord_Promise) Struct() (LogRecord, error) {
	s, err := p.Pipeline.Struct()
	return LogRecord{s}, err
}

const schema_a6be28a43fb8d71b = "x\xda\x8c\x94\xcfk\x1ce\x18\xc7\xbf\xdf\xf7\xdd\xddI" +
	"\xdbl7\xcb\x8c j\x09T\x0b5\xd0\x92\xd4^\x0c" +
	"\x85\xc4\xd2`*I\xd87\x9b\x96\x0a\x15;\xd9}\xed" +
	"\x0e\x9d\xdd\xd9\xec\xcc&\xc4K\x0e*\xe4P1\x05\x03" +
	"Z\xc4\x8b\xa2\xf4T\xac \"\xe8\x1f\xe0\xc1\xabx\x12" +
	"\x0aRzP\xf4\xd8C\x1dy&\xd9\xdd\x18#\xf4\xf6" +
	"\xceg\x1e\x9e\xef\xf3\xe3\xfb\xbe\xe3\x97\xd5\xb4\x9a\xc8o" +
	"\xe4\x00s6_H\x9f\x7f\xf8\xf4W_\xbf\xfa\xcb;" +
	"(\x17\x99>\xfb\xf3\xb7S\x9f\x9f\xfc\xe1\x0b\xe4\x95\x03" +
	"\xb8'\xd4}w\";\x9dRk`\xfa}\xe9\xd7\x9f" +
	"\x0aG\xef\xde\x84)R\xef\x09>$!\xb7\xd4m\xf7" +
	"c\x09~i[}\xa9\xc0\xf4\xce\x9dG[/\x9f\xd0" +
	"\x9f\xc2\xb8T\xe9\x8d?\xc2\x0f\x86\xfe\xaa\xfd\x89K\xca" +
	"\xa1\x06\xdc\x95\xfc\x8f\xa0\xdb\xcd\xdf\x05\xd3\xd9\x95p\xe4" +
	"~e\xf63I\xbc\xb7\x0a-\x89\x8b\x85{\xeeS\x05" +
	"9\x95\x0b\x0f\xc0\xf4\xcd\xe9onm\xcf?\xb8w`" +
	"\xf0\xa3\xc2w.\x1d9=\xce\x82\xfb\xb2\xa6H\xb5\xbf" +
	"\xbf\xdf\x9c\xdb\xee\xefY\xf0Cg\x0d\x0bi\xab[\x0b" +
	"\x83\xe8tM\xf9\xedV{\xb2\x1au;5[\xe9D" +
	"\xab\x81S\xb7\x9d\x0ai\x86t\x0e\xc8\x11(\xbf\xb8\x08" +
	"\x98\x93\x9a\xe6\xacb\x99\xf4(p\xe25\xc0\x8ck\x9a" +
	"s\x8ai-\xf4\xe3x\xc1o\x82\x96\xc3P\x1c\x96j" +
	"\x82V}\xc1oZ\x00}\xd6\x13e&:\xb3ju" +
	"+\x11\xad\xf1\x9e\x96\xfb\x0a\xcf\x03\xd5s\xd4\xac\xceR" +
	"qW\xcd\x9d\xe13@uZ\xf0\x1c\x15\xcb\x8a\x1e\x15" +
	"\xe0^\xe4$P\xbd \xbc\"\\+/\x1b\xf8<\x97" +
	"\x81\xea\x9c\xf0+\xc2s\xdac\x0ep/q\x0c\xa8V" +
	"\x84_\x15\x9e\xa7\xc7<\xe0\xbe\x9e\xf1%\xe1\xd7\x84\x17" +
	"r\x1e\x0b\x80\xfbFV\xce\x15\xe1\x89p'\xefQf" +
	"\xb8\x92\xe9\x86\xc27\x85\x0f)\x8fC\x80\xfb\x1e\x17\x81" +
	"\xea\xbb\xc2\xb7\x84\x1f*x<\x04\xb8\xefg\xf97\x85" +
	"\x7f(\xfc\xb0\xe3\xf1\xb0\x18\x89\xc7\x81\xeaM\xe1\x1f\x09" +
	"?2\xe4\xf1\x08\xe0ng\xf9\xb7\x84\x7fB\xc5\x8dU" +
	"\xdb\x89\x83\xa8\xc5<\x14\xf3\xa0\x0e\xea\xbd\x99N\xc5\xd9" +
	"\xea82p7\xc8\x110\xadE\xad\xc4\xb6\x92%8" +
	"\xeb\xed\xfeZJ\xcbQ}\x9dE(\x16\xc1R\x1c\xbc" +
	"m{97\x1a\xd6\xaf\xdbN\xcc\xa3`E\x93#\x03" +
	"?\x81\x02\xa7\xde\x0alX\xff\xff\xffi\x124m\x9c" +
	"\x88\x0b\xda\xbd\xa4\xa5\xb6\x9f4z\xdaN\xb7\x13\xf6\xcb" +
	"n\xda\xa4\x11\xd5\xff\xe3\x8c\x1d;\xce\xb4\x92\xce\xfa\xe9" +
	"U?\xecZ\xc0\x0c\xeb\xdcsi\xba\xeb\xbb\x991\xc0" +
	"Lk\x9a9\xc5c\xfc;\xdd1B\xf9\xa2\xe0\x0b\x9a" +
	"\xa6\xa2xL=\x16\xac\x81\xf2\xbc\xe0YM\xb3\xa4X" +
	"\x8a/\xfb}\xfdR \x1f\xbd*\xeb\xf2\xb1;\x94}" +
	"&]\xb4\xf1h;j\xc5V|:\xd2\xbf\x13\xbe$" +
	"\xbe\xaai\x1a{\xee\x84]\x06L]\xd3\xb4\x15\xa9v" +
	"\x0akN\x02\xa6\xa1i\x92\x81=\xcb+\xe7\x01\x13j" +
	"\x9aM\xf5\xef\x8d\x1c\xbc\xb4\xa98\xf1\x93n\xfc\xc4\x9b" +
	"\xda\xd7\xc2\\t}j\xd1\xd6\xa2N}_\x0fg\x0e" +
	"\xeaAJ\xbb\xa6i\xc2A\x0f\xc1\xe2A=\x8c\x0dz" +
	"\x18\x0d\xed\xaa\xed\xcfv\xa3i\xe3\xd8\xbf>x\x0a\x0e" +
	"2\xc6Z\x904\x9e\xb4\x81\x99V\xa2;\xeb\xfb\x1e\xa5" +
	"\xe3\x80yA\xd3\x8c\xcb+\xc1=Op\xf9\xd4\x19(" +
	"\xe7\x86]\xef\xe9\x8ffF\xfa'\x00\x00\xff\xffh\x94" +
	"C\x99"

func init() {
	schemas.Register(schema_a6be28a43fb8d71b,
		0x83d947b3b118e923,
		0x8caf0e06cedf0fbd,
		0x9e03253990f9a9a9,
		0xa34850e2106c7148,
		0xb2e74d9591b6405f,
		0xf063f1088f6cee6b)
}
