// Code generated by capnpc-go. DO NOT EDIT.

package java

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SourceProvider struct{ capnp.Struct }

// SourceProvider_TypeID is the unique identifier for the type SourceProvider.
const SourceProvider_TypeID = 0x83d947b3b118e923

func NewSourceProvider(s *capnp.Segment) (SourceProvider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SourceProvider{st}, err
}

func NewRootSourceProvider(s *capnp.Segment) (SourceProvider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SourceProvider{st}, err
}

func ReadRootSourceProvider(msg *capnp.Message) (SourceProvider, error) {
	root, err := msg.RootPtr()
	return SourceProvider{root.Struct()}, err
}

func (s SourceProvider) String() string {
	str, _ := text.Marshal(0x83d947b3b118e923, s.Struct)
	return str
}

func (s SourceProvider) ClassName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SourceProvider) HasClassName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SourceProvider) ClassNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SourceProvider) SetClassName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SourceProvider) KindName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SourceProvider) HasKindName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SourceProvider) KindNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SourceProvider) SetKindName(v string) error {
	return s.Struct.SetText(1, v)
}

// SourceProvider_List is a list of SourceProvider.
type SourceProvider_List struct{ capnp.List }

// NewSourceProvider creates a new list of SourceProvider.
func NewSourceProvider_List(s *capnp.Segment, sz int32) (SourceProvider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SourceProvider_List{l}, err
}

func (s SourceProvider_List) At(i int) SourceProvider { return SourceProvider{s.List.Struct(i)} }

func (s SourceProvider_List) Set(i int, v SourceProvider) error { return s.List.SetStruct(i, v.Struct) }

func (s SourceProvider_List) String() string {
	str, _ := text.MarshalList(0x83d947b3b118e923, s.List)
	return str
}

// SourceProvider_Promise is a wrapper for a SourceProvider promised by a client call.
type SourceProvider_Promise struct{ *capnp.Pipeline }

func (p SourceProvider_Promise) Struct() (SourceProvider, error) {
	s, err := p.Pipeline.Struct()
	return SourceProvider{s}, err
}

type Entry struct{ capnp.Struct }
type Entry_value Entry
type Entry_value_Which uint16

const (
	Entry_value_Which_sVal Entry_value_Which = 0
	Entry_value_Which_iVal Entry_value_Which = 1
	Entry_value_Which_dVal Entry_value_Which = 2
)

func (w Entry_value_Which) String() string {
	const s = "sValiValdVal"
	switch w {
	case Entry_value_Which_sVal:
		return s[0:4]
	case Entry_value_Which_iVal:
		return s[4:8]
	case Entry_value_Which_dVal:
		return s[8:12]

	}
	return "Entry_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xf063f1088f6cee6b

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry{st}, err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry{st}, err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.RootPtr()
	return Entry{root.Struct()}, err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xf063f1088f6cee6b, s.Struct)
	return str
}

func (s Entry) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Entry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Entry) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Entry) Value() Entry_value { return Entry_value(s) }

func (s Entry_value) Which() Entry_value_Which {
	return Entry_value_Which(s.Struct.Uint16(0))
}
func (s Entry_value) SVal() (string, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != sVal")
	}
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Entry_value) HasSVal() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry_value) SValBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Entry_value) SetSVal(v string) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetText(1, v)
}

func (s Entry_value) IVal() int64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != iVal")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Entry_value) SetIVal(v int64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Entry_value) DVal() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != dVal")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Entry_value) HasDVal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry_value) SetDVal(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

// Entry_List is a list of Entry.
type Entry_List struct{ capnp.List }

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Entry_List{l}, err
}

func (s Entry_List) At(i int) Entry { return Entry{s.List.Struct(i)} }

func (s Entry_List) Set(i int, v Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Entry_List) String() string {
	str, _ := text.MarshalList(0xf063f1088f6cee6b, s.List)
	return str
}

// Entry_Promise is a wrapper for a Entry promised by a client call.
type Entry_Promise struct{ *capnp.Pipeline }

func (p Entry_Promise) Struct() (Entry, error) {
	s, err := p.Pipeline.Struct()
	return Entry{s}, err
}

func (p Entry_Promise) Value() Entry_value_Promise { return Entry_value_Promise{p.Pipeline} }

// Entry_value_Promise is a wrapper for a Entry_value promised by a client call.
type Entry_value_Promise struct{ *capnp.Pipeline }

func (p Entry_value_Promise) Struct() (Entry_value, error) {
	s, err := p.Pipeline.Struct()
	return Entry_value{s}, err
}

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0x8caf0e06cedf0fbd

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0x8caf0e06cedf0fbd, s.Struct)
	return str
}

func (s Event) Version() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Event) SetVersion(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Event) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Event) Source() (SourceProvider, error) {
	p, err := s.Struct.Ptr(1)
	return SourceProvider{Struct: p.Struct()}, err
}

func (s Event) HasSource() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event) SetSource(v SourceProvider) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSource sets the source field to a newly
// allocated SourceProvider struct, preferring placement in s's segment.
func (s Event) NewSource() (SourceProvider, error) {
	ss, err := NewSourceProvider(s.Struct.Segment())
	if err != nil {
		return SourceProvider{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) ContentType() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Event) HasContentType() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Event) ContentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Event) SetContentType(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Event) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Event) HasBody() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Event) SetBody(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Event) Size() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Event) SetSize(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Event) Headers() (Entry_List, error) {
	p, err := s.Struct.Ptr(4)
	return Entry_List{List: p.List()}, err
}

func (s Event) HasHeaders() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Event) SetHeaders(v Entry_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Event) NewHeaders(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Event) Fields() (Entry_List, error) {
	p, err := s.Struct.Ptr(5)
	return Entry_List{List: p.List()}, err
}

func (s Event) HasFields() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Event) SetFields(v Entry_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewFields sets the fields field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Event) NewFields(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Event) Timestamp() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Event) SetTimestamp(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Event) Path() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s Event) HasPath() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Event) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s Event) SetPath(v string) error {
	return s.Struct.SetText(6, v)
}

func (s Event) Url() (string, error) {
	p, err := s.Struct.Ptr(7)
	return p.Text(), err
}

func (s Event) HasUrl() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s Event) UrlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return p.TextBytes(), err
}

func (s Event) SetUrl(v string) error {
	return s.Struct.SetText(7, v)
}

func (s Event) Method() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s Event) HasMethod() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s Event) MethodBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s Event) SetMethod(v string) error {
	return s.Struct.SetText(8, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0x8caf0e06cedf0fbd, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

func (p Event_Promise) Source() SourceProvider_Promise {
	return SourceProvider_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Response struct{ capnp.Struct }

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xa34850e2106c7148

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xa34850e2106c7148, s.Struct)
	return str
}

func (s Response) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Response) HasBody() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetBody(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Response) ContentType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Response) HasContentType() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Response) ContentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Response) SetContentType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Response) Status() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Response) SetStatus(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Response) Headers() (Entry_List, error) {
	p, err := s.Struct.Ptr(2)
	return Entry_List{List: p.List()}, err
}

func (s Response) HasHeaders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Response) SetHeaders(v Entry_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Response) NewHeaders(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xa34850e2106c7148, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

const schema_a6be28a43fb8d71b = "x\xda\x8c\x94\xc1k\\U\x14\xc6\xbf\xef\xdey3\x93" +
	"6\xd3\x99\xe1\xbe\x85\xa8\xa5P\x15k\xc1\x92\xaa\x1bC" +
	"!\xb1t0\x914\xcc\xcd\xa4R\xa1\x82/3W\xe6" +
	"\xd17o&\xf3\xde\xa4\x8c\x9b.T\xc8\xa2b\x04\x05" +
	")\xe2FQ\xba*\xea\xc6\x8d\xfe\x01\x82\x82\x0b\x11W" +
	"bA\xa4\x1b\xd1e\x17\xfa\xe4\xbcd&1*\xb8\xbb" +
	"\xf7\xf7.\xdfw8\xe7;o\xceS\x8b\xea\xac\xf7h" +
	"\x01\xb0s^1{\xe8\xee}\x9f|\xf6\xec\x0f\xaf\xa2" +
	"^a\xf6\xc0\xf7\x9f/|x\xea\xcb\x8f\xe0\xa9\x12`" +
	"\xee\xf1\x8e\xd9=Q]\x03\xb3/\xaa?~S<v" +
	"\xfb\x06l\x85\xfa\xc0\xe3\x19y\xe2\xd4M\xd3\x93\xc7O" +
	"\x86\xeac\x05f\xb7n\xdd\xdby\xfa\x11\xfd>\xac\xa1" +
	"\xca\xae\xfe\x1a\xbdY\xfe\xbd\xfd\x1b.\xa9\x125`\x1a" +
	"\xdeW\xa0Y\xf6n\x83\xd9\xd2fT\xbb\xd3\\\xfa@" +
	"\x84\x0fV\xa1E\xf8'\xefSs\xd7\x93\xd3\xcf\xde/" +
	"\xe0\xbe\x92\xadP\x1d.\xf9\xeb\xe2M\xf3]QN\xdf" +
	"\x16\xafa5\x8bG\xed(\xec\x9fi\xab`\x10\x0f\xe6" +
	"[\xfd\xd1\xb0\xed\x9a\xc3\xfeVX\xea\xb8a\x93\xb4e" +
	"]\x00\x0a\x04\xea\x8f\xad\x01\xf6\x94\xa6}J\xb1N\xfa" +
	"\x14x\xf69\xe9\x93\xa6=\xa7\x98\xb5\xa3 IV\x83" +
	"\x1e\xe88\x0b\xc5Y\xa9&\x8c;\xabA\xcf\x01\x98\xb2" +
	"\x89)s\xd3\xc6\x96\xd3q*^s\x13/\xf3\x0c\xcf" +
	"\x03\xads\xd4l-Qq\xcf\xcd4x?\xd0Z\x14" +
	"\xbcB\xc5\xba\xa2O\x05\x98e\xce\x03\xad\x0b\xc2\x9b\xc2" +
	"\xb5\xf2\xf3\x1e^\xe4\x06\xd0Z\x11~YxA\xfb," +
	"\x00\xe6\x12O\x03\xad\xa6\xf0+\xc2=\xfa\xf4\x00\xf3B" +
	"\xce\xd7\x85\xbf$\xbcX\xf0Y\x04\xcc\x8by9\x97\x85" +
	"\xa7\xc2K\x9eO\xe9\xe1f\xee\x1b\x09\xdf\x16^V>" +
	"\xcb\x80y\x9dk@\xeb5\xe1;\xc2g\x8a>g\x00" +
	"\xf3F\xae\xbf-\xfcm\xe1GJ>\x8f\x00\xe6-\x9e" +
	"\x04Z7\x84\xbf+\xfch\xd9\xe7Q\xc0\xbc\x93\xeb\xef" +
	"\x08\x7f\x8f\x8a\xd7\xb7\xdc0\x09\xfb1=(z\xa0\x0e" +
	";\x93\x9e.$\xf9\xe8X\xdb\x0f,\xc8\x1a\x98\xb5\xfb" +
	"q\xea\xe2t\x1d\xa5\xf1`:\x96\xeaF\xbf3f\x05" +
	"\x8a\x15\xb0\x9a\x84\xaf\xb8\x89\xe6\xf5\xae\x0b:n\x98\xf0" +
	"\x18\xd8\xd4dm?O\xa0\xc0\x85\x97C\x17u\xfe\xfb" +
	"{\x96\x86=\x97\xa4\x92\x82\xc1D\xb4:\x08\xd2\xee\xc4" +
	"\xbb4\x1aF\xd3\xb2{.\xed\xf6;\xffH\xc6n\x1c" +
	"\x1bq:\x1c\x9f\xd9\x0a\xa2\x91\x03\xec\xac.<\x98e" +
	"{\xb9k\x9c\x06\xec\xa2\xa6]Q<\xce?\xb3\xdd " +
	"\xd4\x97\x05_\xd0\xb4M\xc5\xe3\xea\x0f\xc1\x1a\xa8_\x14" +
	"\xbc\xa4i\xd7\x15\xab\xc9\xf3\xc1\xd4\xbf\x1a\xcaeRe" +
	"G.{M9\x14\xd25\x97\x9c\x18\xf4\xe3\xc4IN" +
	"k\xd3\x9d\x08D\xf8\x8a\xa6\xed\x1e\xd8\x09\xb7\x01\xd8\x8e" +
	"\xa6\x1d(R\xed\x16\xd6\x9b\x07lW\xd3\xa6\xfb\xf1\xac" +
	"o\x9e\x07l\xa4i\xb7\xd5\xdf'\xf2\xefC[H\xd2" +
	" \x1d%\xff{R\x87\xf7,N\xf5p|h\xa7O" +
	"\x02\xf6aM;'K\xc6\x03?\xa5\xfa\xe3O@\x95" +
	"\xae\xba\xf1\xc4\xfdD>\x87\xbf\x02\x00\x00\xff\xffT%" +
	"\x0fr"

func init() {
	schemas.Register(schema_a6be28a43fb8d71b,
		0x83d947b3b118e923,
		0x8caf0e06cedf0fbd,
		0x9e03253990f9a9a9,
		0xa34850e2106c7148,
		0xf063f1088f6cee6b)
}
