// Code generated by capnpc-go. DO NOT EDIT.

package java

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SourceProvider struct{ capnp.Struct }

// SourceProvider_TypeID is the unique identifier for the type SourceProvider.
const SourceProvider_TypeID = 0x83d947b3b118e923

func NewSourceProvider(s *capnp.Segment) (SourceProvider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SourceProvider{st}, err
}

func NewRootSourceProvider(s *capnp.Segment) (SourceProvider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SourceProvider{st}, err
}

func ReadRootSourceProvider(msg *capnp.Message) (SourceProvider, error) {
	root, err := msg.RootPtr()
	return SourceProvider{root.Struct()}, err
}

func (s SourceProvider) String() string {
	str, _ := text.Marshal(0x83d947b3b118e923, s.Struct)
	return str
}

func (s SourceProvider) ClassName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SourceProvider) HasClassName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SourceProvider) ClassNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SourceProvider) SetClassName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SourceProvider) KindName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SourceProvider) HasKindName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SourceProvider) KindNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SourceProvider) SetKindName(v string) error {
	return s.Struct.SetText(1, v)
}

// SourceProvider_List is a list of SourceProvider.
type SourceProvider_List struct{ capnp.List }

// NewSourceProvider creates a new list of SourceProvider.
func NewSourceProvider_List(s *capnp.Segment, sz int32) (SourceProvider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SourceProvider_List{l}, err
}

func (s SourceProvider_List) At(i int) SourceProvider { return SourceProvider{s.List.Struct(i)} }

func (s SourceProvider_List) Set(i int, v SourceProvider) error { return s.List.SetStruct(i, v.Struct) }

func (s SourceProvider_List) String() string {
	str, _ := text.MarshalList(0x83d947b3b118e923, s.List)
	return str
}

// SourceProvider_Promise is a wrapper for a SourceProvider promised by a client call.
type SourceProvider_Promise struct{ *capnp.Pipeline }

func (p SourceProvider_Promise) Struct() (SourceProvider, error) {
	s, err := p.Pipeline.Struct()
	return SourceProvider{s}, err
}

type Entry struct{ capnp.Struct }
type Entry_value Entry
type Entry_value_Which uint16

const (
	Entry_value_Which_sVal Entry_value_Which = 0
	Entry_value_Which_iVal Entry_value_Which = 1
	Entry_value_Which_dVal Entry_value_Which = 2
	Entry_value_Which_fVal Entry_value_Which = 3
)

func (w Entry_value_Which) String() string {
	const s = "sValiValdValfVal"
	switch w {
	case Entry_value_Which_sVal:
		return s[0:4]
	case Entry_value_Which_iVal:
		return s[4:8]
	case Entry_value_Which_dVal:
		return s[8:12]
	case Entry_value_Which_fVal:
		return s[12:16]

	}
	return "Entry_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xf063f1088f6cee6b

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry{st}, err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry{st}, err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.RootPtr()
	return Entry{root.Struct()}, err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xf063f1088f6cee6b, s.Struct)
	return str
}

func (s Entry) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Entry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Entry) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Entry) Value() Entry_value { return Entry_value(s) }

func (s Entry_value) Which() Entry_value_Which {
	return Entry_value_Which(s.Struct.Uint16(0))
}
func (s Entry_value) SVal() (string, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != sVal")
	}
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Entry_value) HasSVal() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry_value) SValBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Entry_value) SetSVal(v string) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetText(1, v)
}

func (s Entry_value) IVal() int64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != iVal")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Entry_value) SetIVal(v int64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Entry_value) DVal() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != dVal")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Entry_value) HasDVal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry_value) SetDVal(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

func (s Entry_value) FVal() float64 {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != fVal")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Entry_value) SetFVal(v float64) {
	s.Struct.SetUint16(0, 3)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Entry_List is a list of Entry.
type Entry_List struct{ capnp.List }

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Entry_List{l}, err
}

func (s Entry_List) At(i int) Entry { return Entry{s.List.Struct(i)} }

func (s Entry_List) Set(i int, v Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Entry_List) String() string {
	str, _ := text.MarshalList(0xf063f1088f6cee6b, s.List)
	return str
}

// Entry_Promise is a wrapper for a Entry promised by a client call.
type Entry_Promise struct{ *capnp.Pipeline }

func (p Entry_Promise) Struct() (Entry, error) {
	s, err := p.Pipeline.Struct()
	return Entry{s}, err
}

func (p Entry_Promise) Value() Entry_value_Promise { return Entry_value_Promise{p.Pipeline} }

// Entry_value_Promise is a wrapper for a Entry_value promised by a client call.
type Entry_value_Promise struct{ *capnp.Pipeline }

func (p Entry_value_Promise) Struct() (Entry_value, error) {
	s, err := p.Pipeline.Struct()
	return Entry_value{s}, err
}

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0x8caf0e06cedf0fbd

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0x8caf0e06cedf0fbd, s.Struct)
	return str
}

func (s Event) Version() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Event) SetVersion(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Event) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Event) Source() (SourceProvider, error) {
	p, err := s.Struct.Ptr(1)
	return SourceProvider{Struct: p.Struct()}, err
}

func (s Event) HasSource() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event) SetSource(v SourceProvider) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSource sets the source field to a newly
// allocated SourceProvider struct, preferring placement in s's segment.
func (s Event) NewSource() (SourceProvider, error) {
	ss, err := NewSourceProvider(s.Struct.Segment())
	if err != nil {
		return SourceProvider{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) ContentType() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Event) HasContentType() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Event) ContentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Event) SetContentType(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Event) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Event) HasBody() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Event) SetBody(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Event) Size() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Event) SetSize(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Event) Headers() (Entry_List, error) {
	p, err := s.Struct.Ptr(4)
	return Entry_List{List: p.List()}, err
}

func (s Event) HasHeaders() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Event) SetHeaders(v Entry_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Event) NewHeaders(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Event) Fields() (Entry_List, error) {
	p, err := s.Struct.Ptr(5)
	return Entry_List{List: p.List()}, err
}

func (s Event) HasFields() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Event) SetFields(v Entry_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewFields sets the fields field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Event) NewFields(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Event) Timestamp() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Event) SetTimestamp(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Event) Path() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s Event) HasPath() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Event) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s Event) SetPath(v string) error {
	return s.Struct.SetText(6, v)
}

func (s Event) Url() (string, error) {
	p, err := s.Struct.Ptr(7)
	return p.Text(), err
}

func (s Event) HasUrl() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s Event) UrlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return p.TextBytes(), err
}

func (s Event) SetUrl(v string) error {
	return s.Struct.SetText(7, v)
}

func (s Event) Method() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s Event) HasMethod() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s Event) MethodBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s Event) SetMethod(v string) error {
	return s.Struct.SetText(8, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 9}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0x8caf0e06cedf0fbd, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

func (p Event_Promise) Source() SourceProvider_Promise {
	return SourceProvider_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Response struct{ capnp.Struct }

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xa34850e2106c7148

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xa34850e2106c7148, s.Struct)
	return str
}

func (s Response) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Response) HasBody() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetBody(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Response) ContentType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Response) HasContentType() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Response) ContentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Response) SetContentType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Response) Status() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Response) SetStatus(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Response) Headers() (Entry_List, error) {
	p, err := s.Struct.Ptr(2)
	return Entry_List{List: p.List()}, err
}

func (s Response) HasHeaders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Response) SetHeaders(v Entry_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Response) NewHeaders(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xa34850e2106c7148, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

type LogRecord struct{ capnp.Struct }

// LogRecord_TypeID is the unique identifier for the type LogRecord.
const LogRecord_TypeID = 0xb2e74d9591b6405f

func NewLogRecord(s *capnp.Segment) (LogRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return LogRecord{st}, err
}

func NewRootLogRecord(s *capnp.Segment) (LogRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return LogRecord{st}, err
}

func ReadRootLogRecord(msg *capnp.Message) (LogRecord, error) {
	root, err := msg.RootPtr()
	return LogRecord{root.Struct()}, err
}

func (s LogRecord) String() string {
	str, _ := text.Marshal(0xb2e74d9591b6405f, s.Struct)
	return str
}

func (s LogRecord) Level() LogRecord_Level {
	return LogRecord_Level(s.Struct.Uint16(0))
}

func (s LogRecord) SetLevel(v LogRecord_Level) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s LogRecord) Message() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LogRecord) HasMessage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LogRecord) MessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LogRecord) SetMessage(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LogRecord) Timestamp() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s LogRecord) SetTimestamp(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s LogRecord) With() (Entry_List, error) {
	p, err := s.Struct.Ptr(1)
	return Entry_List{List: p.List()}, err
}

func (s LogRecord) HasWith() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LogRecord) SetWith(v Entry_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewWith sets the with field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s LogRecord) NewWith(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// LogRecord_List is a list of LogRecord.
type LogRecord_List struct{ capnp.List }

// NewLogRecord creates a new list of LogRecord.
func NewLogRecord_List(s *capnp.Segment, sz int32) (LogRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return LogRecord_List{l}, err
}

func (s LogRecord_List) At(i int) LogRecord { return LogRecord{s.List.Struct(i)} }

func (s LogRecord_List) Set(i int, v LogRecord) error { return s.List.SetStruct(i, v.Struct) }

func (s LogRecord_List) String() string {
	str, _ := text.MarshalList(0xb2e74d9591b6405f, s.List)
	return str
}

// LogRecord_Promise is a wrapper for a LogRecord promised by a client call.
type LogRecord_Promise struct{ *capnp.Pipeline }

func (p LogRecord_Promise) Struct() (LogRecord, error) {
	s, err := p.Pipeline.Struct()
	return LogRecord{s}, err
}

type LogRecord_Level uint16

// LogRecord_Level_TypeID is the unique identifier for the type LogRecord_Level.
const LogRecord_Level_TypeID = 0xacf0e9b6612355e6

// Values of LogRecord_Level.
const (
	LogRecord_Level_error   LogRecord_Level = 0
	LogRecord_Level_warning LogRecord_Level = 1
	LogRecord_Level_info    LogRecord_Level = 2
	LogRecord_Level_debug   LogRecord_Level = 3
)

// String returns the enum's constant name.
func (c LogRecord_Level) String() string {
	switch c {
	case LogRecord_Level_error:
		return "error"
	case LogRecord_Level_warning:
		return "warning"
	case LogRecord_Level_info:
		return "info"
	case LogRecord_Level_debug:
		return "debug"

	default:
		return ""
	}
}

// LogRecord_LevelFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LogRecord_LevelFromString(c string) LogRecord_Level {
	switch c {
	case "error":
		return LogRecord_Level_error
	case "warning":
		return LogRecord_Level_warning
	case "info":
		return LogRecord_Level_info
	case "debug":
		return LogRecord_Level_debug

	default:
		return 0
	}
}

type LogRecord_Level_List struct{ capnp.List }

func NewLogRecord_Level_List(s *capnp.Segment, sz int32) (LogRecord_Level_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return LogRecord_Level_List{l.List}, err
}

func (l LogRecord_Level_List) At(i int) LogRecord_Level {
	ul := capnp.UInt16List{List: l.List}
	return LogRecord_Level(ul.At(i))
}

func (l LogRecord_Level_List) Set(i int, v LogRecord_Level) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_a6be28a43fb8d71b = "x\xda\x8c\x95Oh\x1ce\x18\xc6\xdf\xe7\xfbvw6" +
	"M\xd3\xdda\x16\xea\xbf\xb0\xd8*\xb4\x01C\x1a=h" +
	"($\x06\x83Q\xb6a'\xdbH\x85\x16;\xd9\xf9\xb2" +
	";tvf33\x9b\xb0\x82\xe4\xa0B\x0a-\xa6`" +
	"@\x8a\x0a\xa2(\x05A\xacPD\xa8\xe0\xc1\x8b\x07\xaf" +
	"\xc5\x93\xd0\x83\xa5\x1e\xa4\x1e\x05u\xe4\x9ddv\xd74" +
	"bo3\xbfy\xf7}\x9fy\xde\xe7\x9b\x9d\xb8(f" +
	"\xc4\x89\xec\xad\x0c\x91\xf9l6\x17\x1f\xbd\xfb\xd0\x97_" +
	"\xbd\xf8\xd3\x9b\xa4\x8f ~\xf4\xd6\xd7\xd3\x9f\x1c\xfb\xf6" +
	"S\xca\x0a\x8d\xc80\xc5m\xe3\\r\xf5\xaaX'\xc4" +
	"7\x0b?\xff\x98;\xf4\xc5%2G \x07\x8a\x87\xb8" +
	"\xe4\xa6\xb8j|\xcf\xc5O\x7f'>\x13\x84\xf8\xda\xb5" +
	"?\xb6\x9e{R~H\xa6\x01\x11_\xf8\xcd}'\xff" +
	"{\xfd\x1e-\x09\x0d\x19\"\xe3\x83\xec\x0f\x04\xe3\xa3\xec" +
	"\x1dB<\xbf\xea\x16oW\xe7?\xe6\xc6\x83*$7" +
	"\xee\xe4\xae\x1bo\xe4\xf8\xaa\x9b\xe3\xe2_\x96\x8eZ7" +
	"\xee\xde\xfb\x9c\xf4\xc3\"~m\xe6\xc6\x95\xedSw\xae" +
	"\x13\xc1\xb0\xb4_\x8d\x96\xc6\x85\x8e\xd6 \xf4\x9f\x99#" +
	"\x10{\xdf\xed\xb2\xf6\x8d\xb1\xad\x1df!\x1aw\xed\xe9" +
	"\xdb\xaf\xf8\xed\xfcU\xe3r\x9e\xaf.\xe6\xd7i!\xf6" +
	":u\xd7\xf1\xc7\xeb\xc2j{\xed\xa9\x9a\xdf\x09\xea\xaa" +
	"\x1a\xf8k\x8ef\xab\xa0\x0a\x98y\x99!\xca\x80H?" +
	"\xbeHd\x1e\x930\x9f\x11\xd0\x81\x12\x18\x9ex\x99\xc8" +
	"\x9c\x900O\x0a\xc4u\xd7\x0a\xc3\x05\xabEP8H" +
	"\x02\x07Y\x8d\xe3\xd9\x0bVK\x11Q\x8f\xa5C\x91\x0c" +
	"\x9d[S\xd2\x8bx\xd6D:\xcbx\x1e\xb3D\xb5\x93" +
	"\x90\xa8\xcdC`w\x9a1\x87G\x88j3\x8c+\x10" +
	"\xd0\x05J\x10D\xc6K\x98\"\xaa\xbd\xc0\xbc\xca\\\x8a" +
	"\x12$\x91q\x0a\xcbD\xb5\x0a\xf33\xcc3\xb2\x94l" +
	"l\x09cD\xb5*\xf3\xb3\xcc\xb3(!\xcb\xe1H\xf8" +
	"i\xe6\xe7\x99\xe72%\xe4\x88\x8cs\x89\x9c3\xcc#" +
	"\xe6Z\xb6\x04\xf6p5\x99\xeb2\xdfd\x9e\x17%\xe4" +
	"\xd9e,\x12\xd5\xdeb\xbe\xc5|(W\xc2\x10\xaf*" +
	"\xe9\xbf\xc9\xfc]\xe6\x07\xb4\x12\x0e\x10\x19Wp\x84\xa8" +
	"v\x89\xf9{\xcc\x87\xf3%\x0c\x13\x19\xdbI\xff-\xe6" +
	"\xefC`cM\x05\xa1\xe3{\xc8\x92@\x96 \x1d;" +
	"\xf5t:LV\x87b\xff\x18\x10P$\xc4u\xdf\x8b" +
	"\x94\x17\x9d&\xad\xdb\xee\xad\xa5\xb0\xec\xdb]\x8c\x90\xc0" +
	"\x08\xa1\x10:\xaf\xab\xb4\xe7FSY\xb6\x0aB\x1c\"" +
	"T%P\xec\xe7\x89\xc0pz\xc5Q\xae\xfd\xdf\xcf\xe3" +
	"\xc8i\xa90\xe2\x14\xb4\xd3\xa6\x85\xb6\x155\xd3\xd9Z" +
	"'p{\xb2[*j\xfa\xf6}\xc9\xd8\x89\xe3\x9c\x17" +
	"\x05\xdd\xf15\xcb\xed(\"\xb3(3\x8f\xc5\xf1n\xee" +
	"\xac1\"\xf3\xac\x84\xd9\x14\x18\xc5\xdf\xf1N\x10t\xc5" +
	"\xf8\xbc\x84\xe9\x0a\x8c\x8a\xbf\x18K\"\xddalK\x98" +
	"m\x81Q\xf9'\xe3\x0c\x91\xdeb\xdc\x940#\x81B" +
	"\xf8\x8a\xd5\x93Up\xf8&\x15o\xf3M\xea\xd5\x0a\xdf" +
	"\x0c\x93\xc0\xf0}A^Ta\xb9\xed{\xa1\xe2,\x17" +
	"{\xe7fPj\xef\xdc\xa8\xe5\xbe\"\x88\x1d\xf1\xad\xa9" +
	"\xbe\x9c4\xc2\xfa\xea,\x91\xe9J\x98\x9b\xe2\xdf[\xdb" +
	"\x7f\xb1\xd3adE\x9d\xf0\x81\xb7\xb9\xc7\xf1\x8a\xdfX" +
	"Tu?\xb0\xc7+\x05\xb5\xa6\xdc\xe4M\x12q\xc7'" +
	"\xf9\x17\xfa\xe3\xb3D\x10\xfa\xc3cD\x90\xba>IT" +
	"VA\xe0\x07\x1b\xebV\xe09^\xa3\xe0x+~\xd9" +
	"V\xcb\x9d\xc6\x1ew*~cz\xa7\xb7\x99\xc1\xe0\xb7" +
	"\x0f\x93\xe5\x0a\xcf\x1a\xb4l\xb2oY\xcf\xb1\xd9\xfej" +
	"\xd3\x83\xaf;\x8b\x83\x96\xedn{u\xacoY\xd9\xe5" +
	"\xd6(\xf4\xe7\x11P l\xb4T\x18Z\x8d\xfewj" +
	"\xbf\xd4\xae;Q\xf3\xff\x9dC\x9aU\x19t\xf7|1" +
	"\x8f\x10\x99OH\x98\x13\xfc\x1a\x18\xf8#\xd1\x9f\x9a$" +
	"\xa1]P\xddt~9I\xf9?\x01\x00\x00\xff\xff=" +
	"[\x81$"

func init() {
	schemas.Register(schema_a6be28a43fb8d71b,
		0x83d947b3b118e923,
		0x8caf0e06cedf0fbd,
		0x9e03253990f9a9a9,
		0xa34850e2106c7148,
		0xacf0e9b6612355e6,
		0xb2e74d9591b6405f,
		0xf063f1088f6cee6b)
}
