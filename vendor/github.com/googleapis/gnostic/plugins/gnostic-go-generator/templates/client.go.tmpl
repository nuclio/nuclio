// GENERATED FILE: DO NOT EDIT!

package {{.Renderer.Package}}

import (
  "bytes"
  "errors"
  "encoding/json"
  "fmt"
  "net/http"
  "strings"
)
  
// API client representation.
type Client struct {
	service string
} 

// Create an API client.
func NewClient(service string) *Client {
	client := &Client{}
	client.service = service
	return client
}

//-{{range .Renderer.Methods}}
{{commentForText .Description}}
//-{{if eq .ResultTypeName ""}}
func (client *Client) {{.ClientName}}({{parameterList .}}) (err error) {
//-{{else}}
func (client *Client) {{.ClientName}}({{parameterList .}}) (result *{{.ResultTypeName}}, err error) {
//-{{end}}
	path := client.service + "{{.Path}}"
	//-{{if hasParameters .}}
	//-{{range .ParametersType.Fields}}	
	//-{{if eq .Position "path"}}
	path = strings.Replace(path, "{" + "{{.JSONName}}" + "}", fmt.Sprintf("%v", {{.JSONName}}), 1)
	//-{{end}}
	//-{{end}}
	//-{{end}}
	//-{{if eq .Method "POST"}}
	body := new(bytes.Buffer)
	json.NewEncoder(body).Encode({{bodyParameterName .}})
	req, err := http.NewRequest("{{.Method}}", path, body)
	//-{{else}}
	req, err := http.NewRequest("{{.Method}}", path, nil)
	//-{{end}}
	if err != nil {
		return
	}
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return
	}
	if resp.StatusCode == 200 {
		defer resp.Body.Close()
		//-{{if ne .ResultTypeName ""}}
		decoder := json.NewDecoder(resp.Body)
		result = &{{.ResultTypeName}}{}
		decoder.Decode(result)
		//-{{end}}
	} else {
		err = errors.New(resp.Status)
	}
	return
}

//-{{end}}

// refer to imported packages that may or may not be used in generated code
func forced_package_references() {
	_ = new(bytes.Buffer)
	_ = fmt.Sprintf("")
	_ = strings.Split("","")
}