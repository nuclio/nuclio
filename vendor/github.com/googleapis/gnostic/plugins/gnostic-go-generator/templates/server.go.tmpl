// GENERATED FILE: DO NOT EDIT!

package {{.Renderer.Package}}

import (
	"encoding/json"
	"errors"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

func intValue(s string) (v int64) {
	v, _ = strconv.ParseInt(s, 10, 64)
	return v
}

// This package-global variable holds the user-written Provider for API services.
// See the Provider interface for details.
var provider Provider

// These handlers serve API methods.
//-{{range .Renderer.Methods}}

// Handler
{{commentForText .Description}}
func {{.HandlerName}}(w http.ResponseWriter, r *http.Request) {
	var err error
	//-{{if hasParameters .}}
	// instantiate the parameters structure
	var parameters {{.ParametersTypeName}}
	//-{{if eq .Method "POST"}}
	// deserialize request from post data
	decoder := json.NewDecoder(r.Body)
	err = decoder.Decode(&parameters.{{bodyParameterFieldName .}})
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte(err.Error() + "\n"))
		return
	}
	//-{{end}}
	// get request fields in path and query parameters
	//-{{if hasPathParameters .}}
	vars := mux.Vars(r)
	//-{{end}}
	//-{{if hasFormParameters .}}
	r.ParseForm()
	//-{{end}}
	//-{{range .ParametersType.Fields}}	
	//-{{if eq .Position "path"}}
	if value, ok := vars["{{.JSONName}}"]; ok {
		parameters.{{.Name}} = intValue(value)
	}
	//-{{end}}	
	//-{{if eq .Position "formdata"}}
	if len(r.Form["{{.JSONName}}"]) > 0 {
		parameters.{{.Name}} = intValue(r.Form["{{.JSONName}}"][0])
	}
	//-{{end}}
	//-{{end}}
	//-{{end}}
	//-{{if hasResponses .}}	
	// instantiate the responses structure
	var responses {{.ResponsesTypeName}}
	//-{{end}}
	// call the service provider	
	//-{{if hasParameters .}}
	//-{{if hasResponses .}}
	err = provider.{{.ProcessorName}}(&parameters, &responses)
	//-{{else}}
	err = provider.{{.ProcessorName}}(&parameters)
	//-{{end}}
	//-{{else}}
	//-{{if hasResponses .}}
	err = provider.{{.ProcessorName}}(&responses)
	//-{{else}}
	err = provider.{{.ProcessorName}}()
	//-{{end}}
	//-{{end}}	
	if err == nil {
	//-{{ if hasResponses .}}
		//-{{ if .ResponsesType | hasFieldNamedOK }}		
		if responses.OK != nil {
			// write the normal response
			encoder := json.NewEncoder(w)
			encoder.Encode(responses.OK)
			return
		} 
		//-{{end}}
		//-{{ if .ResponsesType | hasFieldNamedDefault }}		
		if responses.Default != nil {
			w.WriteHeader(int(responses.Default.Code))
			w.Write([]byte(responses.Default.Message + "\n"))
			return
		}
		//-{{end}}
	//-{{end}}
	} else {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error() + "\n"))
		return
	}
}
//-{{end}}

// Initialize the API service.
func Initialize(p Provider) {
	provider = p
	var router = mux.NewRouter(){{range .Renderer.Methods}}
	router.HandleFunc("{{.Path}}", {{.HandlerName}}).Methods("{{.Method}}"){{end}}
	http.Handle("/", router)
}

// Provide the API service over HTTP.
func ServeHTTP(address string) error {
	if provider == nil {
		return errors.New("Use {{.Renderer.Package}}.Initialize() to set a service provider.")
	}
	return http.ListenAndServe(address, nil)
}
