// Automatically generated by gen_errors.go

package nuclio

import (
	"errors"
	"net/http"
)

// WithStatusCode is an error with status code
type WithStatusCode interface {
	StatusCode() int
}

// ErrorWithStatusCode implements both error and WithStatusCode
type ErrorWithStatusCode struct {
	error
	statusCode int
}

// StatusCode returns the status code
func (ewsc *ErrorWithStatusCode) StatusCode() int {
	return ewsc.statusCode
}

// ErrAccepted is a StatusAccepted Error
var ErrAccepted = ErrorWithStatusCode{statusCode: http.StatusAccepted}

// NewErrAccepted returns a new ErrAccepted with custom error message
func NewErrAccepted(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusAccepted,
	}
}

// ErrAlreadyReported is a StatusAlreadyReported Error
var ErrAlreadyReported = ErrorWithStatusCode{statusCode: http.StatusAlreadyReported}

// NewErrAlreadyReported returns a new ErrAlreadyReported with custom error message
func NewErrAlreadyReported(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusAlreadyReported,
	}
}

// ErrBadGateway is a StatusBadGateway Error
var ErrBadGateway = ErrorWithStatusCode{statusCode: http.StatusBadGateway}

// NewErrBadGateway returns a new ErrBadGateway with custom error message
func NewErrBadGateway(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusBadGateway,
	}
}

// ErrBadRequest is a StatusBadRequest Error
var ErrBadRequest = ErrorWithStatusCode{statusCode: http.StatusBadRequest}

// NewErrBadRequest returns a new ErrBadRequest with custom error message
func NewErrBadRequest(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusBadRequest,
	}
}

// ErrConflict is a StatusConflict Error
var ErrConflict = ErrorWithStatusCode{statusCode: http.StatusConflict}

// NewErrConflict returns a new ErrConflict with custom error message
func NewErrConflict(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusConflict,
	}
}

// ErrContinue is a StatusContinue Error
var ErrContinue = ErrorWithStatusCode{statusCode: http.StatusContinue}

// NewErrContinue returns a new ErrContinue with custom error message
func NewErrContinue(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusContinue,
	}
}

// ErrCreated is a StatusCreated Error
var ErrCreated = ErrorWithStatusCode{statusCode: http.StatusCreated}

// NewErrCreated returns a new ErrCreated with custom error message
func NewErrCreated(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusCreated,
	}
}

// ErrExpectationFailed is a StatusExpectationFailed Error
var ErrExpectationFailed = ErrorWithStatusCode{statusCode: http.StatusExpectationFailed}

// NewErrExpectationFailed returns a new ErrExpectationFailed with custom error message
func NewErrExpectationFailed(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusExpectationFailed,
	}
}

// ErrFailedDependency is a StatusFailedDependency Error
var ErrFailedDependency = ErrorWithStatusCode{statusCode: http.StatusFailedDependency}

// NewErrFailedDependency returns a new ErrFailedDependency with custom error message
func NewErrFailedDependency(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusFailedDependency,
	}
}

// ErrForbidden is a StatusForbidden Error
var ErrForbidden = ErrorWithStatusCode{statusCode: http.StatusForbidden}

// NewErrForbidden returns a new ErrForbidden with custom error message
func NewErrForbidden(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusForbidden,
	}
}

// ErrFound is a StatusFound Error
var ErrFound = ErrorWithStatusCode{statusCode: http.StatusFound}

// NewErrFound returns a new ErrFound with custom error message
func NewErrFound(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusFound,
	}
}

// ErrGatewayTimeout is a StatusGatewayTimeout Error
var ErrGatewayTimeout = ErrorWithStatusCode{statusCode: http.StatusGatewayTimeout}

// NewErrGatewayTimeout returns a new ErrGatewayTimeout with custom error message
func NewErrGatewayTimeout(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusGatewayTimeout,
	}
}

// ErrGone is a StatusGone Error
var ErrGone = ErrorWithStatusCode{statusCode: http.StatusGone}

// NewErrGone returns a new ErrGone with custom error message
func NewErrGone(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusGone,
	}
}

// ErrHTTPVersionNotSupported is a StatusHTTPVersionNotSupported Error
var ErrHTTPVersionNotSupported = ErrorWithStatusCode{statusCode: http.StatusHTTPVersionNotSupported}

// NewErrHTTPVersionNotSupported returns a new ErrHTTPVersionNotSupported with custom error message
func NewErrHTTPVersionNotSupported(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusHTTPVersionNotSupported,
	}
}

// ErrIMUsed is a StatusIMUsed Error
var ErrIMUsed = ErrorWithStatusCode{statusCode: http.StatusIMUsed}

// NewErrIMUsed returns a new ErrIMUsed with custom error message
func NewErrIMUsed(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusIMUsed,
	}
}

// ErrInsufficientStorage is a StatusInsufficientStorage Error
var ErrInsufficientStorage = ErrorWithStatusCode{statusCode: http.StatusInsufficientStorage}

// NewErrInsufficientStorage returns a new ErrInsufficientStorage with custom error message
func NewErrInsufficientStorage(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusInsufficientStorage,
	}
}

// ErrInternalServerError is a StatusInternalServerError Error
var ErrInternalServerError = ErrorWithStatusCode{statusCode: http.StatusInternalServerError}

// NewErrInternalServerError returns a new ErrInternalServerError with custom error message
func NewErrInternalServerError(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusInternalServerError,
	}
}

// ErrLengthRequired is a StatusLengthRequired Error
var ErrLengthRequired = ErrorWithStatusCode{statusCode: http.StatusLengthRequired}

// NewErrLengthRequired returns a new ErrLengthRequired with custom error message
func NewErrLengthRequired(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusLengthRequired,
	}
}

// ErrLocked is a StatusLocked Error
var ErrLocked = ErrorWithStatusCode{statusCode: http.StatusLocked}

// NewErrLocked returns a new ErrLocked with custom error message
func NewErrLocked(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusLocked,
	}
}

// ErrLoopDetected is a StatusLoopDetected Error
var ErrLoopDetected = ErrorWithStatusCode{statusCode: http.StatusLoopDetected}

// NewErrLoopDetected returns a new ErrLoopDetected with custom error message
func NewErrLoopDetected(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusLoopDetected,
	}
}

// ErrMethodNotAllowed is a StatusMethodNotAllowed Error
var ErrMethodNotAllowed = ErrorWithStatusCode{statusCode: http.StatusMethodNotAllowed}

// NewErrMethodNotAllowed returns a new ErrMethodNotAllowed with custom error message
func NewErrMethodNotAllowed(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusMethodNotAllowed,
	}
}

// ErrMovedPermanently is a StatusMovedPermanently Error
var ErrMovedPermanently = ErrorWithStatusCode{statusCode: http.StatusMovedPermanently}

// NewErrMovedPermanently returns a new ErrMovedPermanently with custom error message
func NewErrMovedPermanently(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusMovedPermanently,
	}
}

// ErrMultiStatus is a StatusMultiStatus Error
var ErrMultiStatus = ErrorWithStatusCode{statusCode: http.StatusMultiStatus}

// NewErrMultiStatus returns a new ErrMultiStatus with custom error message
func NewErrMultiStatus(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusMultiStatus,
	}
}

// ErrMultipleChoices is a StatusMultipleChoices Error
var ErrMultipleChoices = ErrorWithStatusCode{statusCode: http.StatusMultipleChoices}

// NewErrMultipleChoices returns a new ErrMultipleChoices with custom error message
func NewErrMultipleChoices(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusMultipleChoices,
	}
}

// ErrNetworkAuthenticationRequired is a StatusNetworkAuthenticationRequired Error
var ErrNetworkAuthenticationRequired = ErrorWithStatusCode{statusCode: http.StatusNetworkAuthenticationRequired}

// NewErrNetworkAuthenticationRequired returns a new ErrNetworkAuthenticationRequired with custom error message
func NewErrNetworkAuthenticationRequired(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNetworkAuthenticationRequired,
	}
}

// ErrNoContent is a StatusNoContent Error
var ErrNoContent = ErrorWithStatusCode{statusCode: http.StatusNoContent}

// NewErrNoContent returns a new ErrNoContent with custom error message
func NewErrNoContent(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNoContent,
	}
}

// ErrNonAuthoritativeInfo is a StatusNonAuthoritativeInfo Error
var ErrNonAuthoritativeInfo = ErrorWithStatusCode{statusCode: http.StatusNonAuthoritativeInfo}

// NewErrNonAuthoritativeInfo returns a new ErrNonAuthoritativeInfo with custom error message
func NewErrNonAuthoritativeInfo(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNonAuthoritativeInfo,
	}
}

// ErrNotAcceptable is a StatusNotAcceptable Error
var ErrNotAcceptable = ErrorWithStatusCode{statusCode: http.StatusNotAcceptable}

// NewErrNotAcceptable returns a new ErrNotAcceptable with custom error message
func NewErrNotAcceptable(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNotAcceptable,
	}
}

// ErrNotExtended is a StatusNotExtended Error
var ErrNotExtended = ErrorWithStatusCode{statusCode: http.StatusNotExtended}

// NewErrNotExtended returns a new ErrNotExtended with custom error message
func NewErrNotExtended(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNotExtended,
	}
}

// ErrNotFound is a StatusNotFound Error
var ErrNotFound = ErrorWithStatusCode{statusCode: http.StatusNotFound}

// NewErrNotFound returns a new ErrNotFound with custom error message
func NewErrNotFound(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNotFound,
	}
}

// ErrNotImplemented is a StatusNotImplemented Error
var ErrNotImplemented = ErrorWithStatusCode{statusCode: http.StatusNotImplemented}

// NewErrNotImplemented returns a new ErrNotImplemented with custom error message
func NewErrNotImplemented(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNotImplemented,
	}
}

// ErrNotModified is a StatusNotModified Error
var ErrNotModified = ErrorWithStatusCode{statusCode: http.StatusNotModified}

// NewErrNotModified returns a new ErrNotModified with custom error message
func NewErrNotModified(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusNotModified,
	}
}

// ErrPartialContent is a StatusPartialContent Error
var ErrPartialContent = ErrorWithStatusCode{statusCode: http.StatusPartialContent}

// NewErrPartialContent returns a new ErrPartialContent with custom error message
func NewErrPartialContent(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusPartialContent,
	}
}

// ErrPaymentRequired is a StatusPaymentRequired Error
var ErrPaymentRequired = ErrorWithStatusCode{statusCode: http.StatusPaymentRequired}

// NewErrPaymentRequired returns a new ErrPaymentRequired with custom error message
func NewErrPaymentRequired(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusPaymentRequired,
	}
}

// ErrPermanentRedirect is a StatusPermanentRedirect Error
var ErrPermanentRedirect = ErrorWithStatusCode{statusCode: http.StatusPermanentRedirect}

// NewErrPermanentRedirect returns a new ErrPermanentRedirect with custom error message
func NewErrPermanentRedirect(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusPermanentRedirect,
	}
}

// ErrPreconditionFailed is a StatusPreconditionFailed Error
var ErrPreconditionFailed = ErrorWithStatusCode{statusCode: http.StatusPreconditionFailed}

// NewErrPreconditionFailed returns a new ErrPreconditionFailed with custom error message
func NewErrPreconditionFailed(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusPreconditionFailed,
	}
}

// ErrPreconditionRequired is a StatusPreconditionRequired Error
var ErrPreconditionRequired = ErrorWithStatusCode{statusCode: http.StatusPreconditionRequired}

// NewErrPreconditionRequired returns a new ErrPreconditionRequired with custom error message
func NewErrPreconditionRequired(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusPreconditionRequired,
	}
}

// ErrProcessing is a StatusProcessing Error
var ErrProcessing = ErrorWithStatusCode{statusCode: http.StatusProcessing}

// NewErrProcessing returns a new ErrProcessing with custom error message
func NewErrProcessing(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusProcessing,
	}
}

// ErrProxyAuthRequired is a StatusProxyAuthRequired Error
var ErrProxyAuthRequired = ErrorWithStatusCode{statusCode: http.StatusProxyAuthRequired}

// NewErrProxyAuthRequired returns a new ErrProxyAuthRequired with custom error message
func NewErrProxyAuthRequired(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusProxyAuthRequired,
	}
}

// ErrRequestEntityTooLarge is a StatusRequestEntityTooLarge Error
var ErrRequestEntityTooLarge = ErrorWithStatusCode{statusCode: http.StatusRequestEntityTooLarge}

// NewErrRequestEntityTooLarge returns a new ErrRequestEntityTooLarge with custom error message
func NewErrRequestEntityTooLarge(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusRequestEntityTooLarge,
	}
}

// ErrRequestHeaderFieldsTooLarge is a StatusRequestHeaderFieldsTooLarge Error
var ErrRequestHeaderFieldsTooLarge = ErrorWithStatusCode{statusCode: http.StatusRequestHeaderFieldsTooLarge}

// NewErrRequestHeaderFieldsTooLarge returns a new ErrRequestHeaderFieldsTooLarge with custom error message
func NewErrRequestHeaderFieldsTooLarge(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusRequestHeaderFieldsTooLarge,
	}
}

// ErrRequestTimeout is a StatusRequestTimeout Error
var ErrRequestTimeout = ErrorWithStatusCode{statusCode: http.StatusRequestTimeout}

// NewErrRequestTimeout returns a new ErrRequestTimeout with custom error message
func NewErrRequestTimeout(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusRequestTimeout,
	}
}

// ErrRequestURITooLong is a StatusRequestURITooLong Error
var ErrRequestURITooLong = ErrorWithStatusCode{statusCode: http.StatusRequestURITooLong}

// NewErrRequestURITooLong returns a new ErrRequestURITooLong with custom error message
func NewErrRequestURITooLong(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusRequestURITooLong,
	}
}

// ErrRequestedRangeNotSatisfiable is a StatusRequestedRangeNotSatisfiable Error
var ErrRequestedRangeNotSatisfiable = ErrorWithStatusCode{statusCode: http.StatusRequestedRangeNotSatisfiable}

// NewErrRequestedRangeNotSatisfiable returns a new ErrRequestedRangeNotSatisfiable with custom error message
func NewErrRequestedRangeNotSatisfiable(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusRequestedRangeNotSatisfiable,
	}
}

// ErrResetContent is a StatusResetContent Error
var ErrResetContent = ErrorWithStatusCode{statusCode: http.StatusResetContent}

// NewErrResetContent returns a new ErrResetContent with custom error message
func NewErrResetContent(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusResetContent,
	}
}

// ErrSeeOther is a StatusSeeOther Error
var ErrSeeOther = ErrorWithStatusCode{statusCode: http.StatusSeeOther}

// NewErrSeeOther returns a new ErrSeeOther with custom error message
func NewErrSeeOther(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusSeeOther,
	}
}

// ErrServiceUnavailable is a StatusServiceUnavailable Error
var ErrServiceUnavailable = ErrorWithStatusCode{statusCode: http.StatusServiceUnavailable}

// NewErrServiceUnavailable returns a new ErrServiceUnavailable with custom error message
func NewErrServiceUnavailable(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusServiceUnavailable,
	}
}

// ErrSwitchingProtocols is a StatusSwitchingProtocols Error
var ErrSwitchingProtocols = ErrorWithStatusCode{statusCode: http.StatusSwitchingProtocols}

// NewErrSwitchingProtocols returns a new ErrSwitchingProtocols with custom error message
func NewErrSwitchingProtocols(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusSwitchingProtocols,
	}
}

// ErrTeapot is a StatusTeapot Error
var ErrTeapot = ErrorWithStatusCode{statusCode: http.StatusTeapot}

// NewErrTeapot returns a new ErrTeapot with custom error message
func NewErrTeapot(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusTeapot,
	}
}

// ErrTemporaryRedirect is a StatusTemporaryRedirect Error
var ErrTemporaryRedirect = ErrorWithStatusCode{statusCode: http.StatusTemporaryRedirect}

// NewErrTemporaryRedirect returns a new ErrTemporaryRedirect with custom error message
func NewErrTemporaryRedirect(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusTemporaryRedirect,
	}
}

// ErrTooManyRequests is a StatusTooManyRequests Error
var ErrTooManyRequests = ErrorWithStatusCode{statusCode: http.StatusTooManyRequests}

// NewErrTooManyRequests returns a new ErrTooManyRequests with custom error message
func NewErrTooManyRequests(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusTooManyRequests,
	}
}

// ErrUnauthorized is a StatusUnauthorized Error
var ErrUnauthorized = ErrorWithStatusCode{statusCode: http.StatusUnauthorized}

// NewErrUnauthorized returns a new ErrUnauthorized with custom error message
func NewErrUnauthorized(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusUnauthorized,
	}
}

// ErrUnavailableForLegalReasons is a StatusUnavailableForLegalReasons Error
var ErrUnavailableForLegalReasons = ErrorWithStatusCode{statusCode: http.StatusUnavailableForLegalReasons}

// NewErrUnavailableForLegalReasons returns a new ErrUnavailableForLegalReasons with custom error message
func NewErrUnavailableForLegalReasons(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusUnavailableForLegalReasons,
	}
}

// ErrUnprocessableEntity is a StatusUnprocessableEntity Error
var ErrUnprocessableEntity = ErrorWithStatusCode{statusCode: http.StatusUnprocessableEntity}

// NewErrUnprocessableEntity returns a new ErrUnprocessableEntity with custom error message
func NewErrUnprocessableEntity(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusUnprocessableEntity,
	}
}

// ErrUnsupportedMediaType is a StatusUnsupportedMediaType Error
var ErrUnsupportedMediaType = ErrorWithStatusCode{statusCode: http.StatusUnsupportedMediaType}

// NewErrUnsupportedMediaType returns a new ErrUnsupportedMediaType with custom error message
func NewErrUnsupportedMediaType(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusUnsupportedMediaType,
	}
}

// ErrUpgradeRequired is a StatusUpgradeRequired Error
var ErrUpgradeRequired = ErrorWithStatusCode{statusCode: http.StatusUpgradeRequired}

// NewErrUpgradeRequired returns a new ErrUpgradeRequired with custom error message
func NewErrUpgradeRequired(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusUpgradeRequired,
	}
}

// ErrUseProxy is a StatusUseProxy Error
var ErrUseProxy = ErrorWithStatusCode{statusCode: http.StatusUseProxy}

// NewErrUseProxy returns a new ErrUseProxy with custom error message
func NewErrUseProxy(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusUseProxy,
	}
}

// ErrVariantAlsoNegotiates is a StatusVariantAlsoNegotiates Error
var ErrVariantAlsoNegotiates = ErrorWithStatusCode{statusCode: http.StatusVariantAlsoNegotiates}

// NewErrVariantAlsoNegotiates returns a new ErrVariantAlsoNegotiates with custom error message
func NewErrVariantAlsoNegotiates(message string) error {
	return &ErrorWithStatusCode{
		error:      errors.New(message),
		statusCode: http.StatusVariantAlsoNegotiates,
	}
}
