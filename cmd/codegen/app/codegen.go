/*
Copyright 2017 The Nuclio Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// +build ignore

// This program generates function template sources in pkg/dashboard/functiontemplates/generated.
// It can be invoked by running go generate

package app

import (
	"os"
	//"path/filepath"
	"strings"
	"text/template"
	"time"

	"github.com/nuclio/nuclio/pkg/dashboard/functiontemplates"
	"github.com/nuclio/nuclio/pkg/errors"

	"github.com/ghodss/yaml"
	"github.com/nuclio/logger"
	"github.com/nuclio/zap"
	"github.com/nuclio/nuclio/pkg/functionconfig"
)

var funcMap = template.FuncMap{
	"marshalConfig": func (data interface{}) string {
		bytes, _ := yaml.Marshal(data)
		return string(bytes)
	},
	"cleanupBackticks": func (s string) string {
		return strings.Replace(s, "`", "`" + " + \"`\" + " + "`", -1)
	},
}

var packageTemplate = template.Must(template.New("").Funcs(funcMap).Parse(`// Code generated by go generate; DO NOT EDIT.

package functiontemplates

import (
	"github.com/nuclio/nuclio/pkg/functionconfig"

	"github.com/ghodss/yaml"
)

var FunctionTemplates = []*FunctionTemplate{
{{- range .FunctionTemplates }}
	&FunctionTemplate{
		Name: {{ printf "%q" .Name }},
		Configuration: unmarshalConfig(` + "`" + `{{ marshalConfig .Configuration | cleanupBackticks }}` + "`" + `),
		SourceCode: ` + "`" + `{{ cleanupBackticks .SourceCode }}` + "`" + `,
	},
{{- end }}
}

func unmarshalConfig(marshaledConfig string) functionconfig.Config {
	config := functionconfig.Config{}
	yaml.Unmarshal([]byte(marshaledConfig), &config)

	return config
}
`))

func Run(examplesDir string, outputPath string) error {
	logger, err := createLogger()
	if err != nil {
		return errors.Wrap(err, "Failed to create logger")
	}

	err = generateCode(logger, examplesDir, outputPath)
	if err != nil {
		return errors.Wrap(err, "Failed to generate function template sources")
	}

	return nil
}

func generateCode(logger logger.Logger, examplesDir string, outputPath string) error {
	if err := verifyPaths(examplesDir, outputPath); err != nil {
		return errors.Wrap(err, "Failed to verify paths")
	}

	functionTemplates := []*functiontemplates.FunctionTemplate{
		&functiontemplates.FunctionTemplate{
			Name: "Hello World",
			Configuration: functionconfig.Config{
				Meta: functionconfig.Meta{
					Labels: map[string]string{
						"a": "b`",
						"c": "d",
					},
				},
				Spec: functionconfig.Spec{
					Handler: "main:Handler",
					Runtime: "golang",
				},
			},
			SourceCode: `
package main

import (
	"github.com/nuclio/nuclio-sdk-go"
)

func Handler(context *nuclio.Context, event nuclio.Event) (interface{}, error) {
	context.Logger.Info("This is an unstrucured %s", "log")

	return nuclio.Response{
		StatusCode:  200,
		ContentType: "application/text",
		Body:        []byte("Hello, from ` + "`" + `nuclio :]"),
	}, nil
}`,
		},
	}

	//var functionTemplates []*functiontemplates.FunctionTemplate
	//runtimes := []string{"golang", "python", "pypy", "nodejs", "java", "dotnetcore", "shell"}
	//
	//for _, runtime := range runtimes {
	//	runtimePath := filepath.Join(examplesDir, runtime)
	//
	//	err := filepath.Walk(runtimePath, func(path string, info os.FileInfo, err error) error {
	//		if err != nil {
	//			return err
	//		}
	//		if info.IsDir() && path != runtimePath {
	//			logger.DebugWith("Found function directory", "runtime", runtime, "name", path.)
	//			return nil
	//		}
	//
	//		return nil
	//	})
	//
	//	if err != nil {
	//		return errors.Wrap(err, "Failed to traverse examples directory")
	//	}
	//
	//}
	outputFile, _ := os.Create(outputPath)

	packageTemplate.Execute(outputFile, struct {
		Timestamp time.Time
		FunctionTemplates []*functiontemplates.FunctionTemplate
	}{
		Timestamp: time.Now(),
		FunctionTemplates: functionTemplates,
	})

	return nil
}

func verifyPaths(examplesDir string, outputPath string) error {
	//if info, err := os.Stat(examplesDir); err != nil {
	//	return errors.Wrap(err, "Given path is not a directory")
	//}

	return nil
}

func createLogger() (logger.Logger, error) {
	return nucliozap.NewNuclioZapCmd("codegen", nucliozap.DebugLevel)
}
